/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package studentmanagementsystem;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author paric
 */
public class PerformanceForm extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(PerformanceForm.class.getName());

    /**
     * Creates new form PerformanceForm
     */
    
    Dashboard dashboardRef;
    public PerformanceForm(Dashboard dashboard) {
        initComponents();
        tblGrades.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent e) {
        int row = tblGrades.getSelectedRow();
        if (row != -1) {
            txtSubject.setText(tblGrades.getValueAt(row, 2).toString());
            txtMarks.setText(tblGrades.getValueAt(row, 3).toString());

            String selectedStudent = tblGrades.getValueAt(row, 1).toString();
            cmbStudent.setSelectedItem(selectedStudent);
        }
    }
});

        this.dashboardRef = dashboard;
        loadStudentsIntoComboBox();
        loadGradesTable();
        
    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); 

    this.addWindowListener(new java.awt.event.WindowAdapter() {
    @Override
    public void windowClosed(java.awt.event.WindowEvent e) {
        if (dashboardRef != null) {
            dashboardRef.setVisible(true); // Reopen dashboard
        }
    }
});


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbStudent = new javax.swing.JComboBox<>();
        txtSubject = new javax.swing.JTextField();
        txtMarks = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGrades = new javax.swing.JTable();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLayeredPane1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        jLabel1.setText("Performance Form");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 27, 0, 0);
        jLayeredPane1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Student :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.ipadx = 38;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(37, 28, 0, 0);
        jLayeredPane1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Subject :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(25, 28, 0, 0);
        jLayeredPane1.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Marks :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.ipadx = 39;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(33, 28, 0, 0);
        jLayeredPane1.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Buttons :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 21;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 28, 0, 0);
        jLayeredPane1.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Performance Table :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(35, 28, 0, 0);
        jLayeredPane1.add(jLabel6, gridBagConstraints);

        cmbStudent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 64;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 27, 0, 0);
        jLayeredPane1.add(cmbStudent, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 72;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 27, 0, 0);
        jLayeredPane1.add(txtSubject, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 72;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 27, 0, 0);
        jLayeredPane1.add(txtMarks, gridBagConstraints);

        btnAdd.setText("ADD");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(29, 4, 0, 0);
        jLayeredPane1.add(btnAdd, gridBagConstraints);

        btnUpdate.setText("UPDATE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 4, 0, 0);
        jLayeredPane1.add(btnUpdate, gridBagConstraints);

        btnDelete.setText("DELETE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 4, 0, 0);
        jLayeredPane1.add(btnDelete, gridBagConstraints);

        btnClear.setText("CLEAR");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 4, 0, 0);
        jLayeredPane1.add(btnClear, gridBagConstraints);

        tblGrades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblGrades);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 515;
        gridBagConstraints.ipady = 116;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(34, 28, 22, 46);
        jLayeredPane1.add(jScrollPane1, gridBagConstraints);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 608, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
 private void loadStudentsIntoComboBox() {
    try {
        Connection conn = DBConnection.getConnection();
        String query = "SELECT id, name FROM students";
        PreparedStatement pst = conn.prepareStatement(query);
        ResultSet rs = pst.executeQuery();

        cmbStudent.removeAllItems(); // Clears before loading

        while (rs.next()) {
            int id = rs.getInt("id");
            String name = rs.getString("name");
            cmbStudent.addItem(id + " - " + name); // Combines ID and name
        }

        rs.close();
        pst.close();
        conn.close();

    } catch (Exception e) {
        e.printStackTrace();
    }
}    
    
private void clearForm() {
    cmbStudent.setSelectedIndex(0);
    txtSubject.setText("");
    txtMarks.setText("");
}
  

  private void loadGradesTable() {
    try {
        Connection conn = DBConnection.getConnection();
        String query = "SELECT g.id, s.name, g.subject, g.marks FROM grades g JOIN students s ON g.student_id = s.id";
        PreparedStatement pst = conn.prepareStatement(query);
        ResultSet rs = pst.executeQuery();

        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"ID", "Student", "Subject", "Marks"});

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("name"),
                rs.getString("subject"),
                rs.getDouble("marks")
            });
        }

        tblGrades.setModel(model);

        rs.close();
        pst.close();
        conn.close();

    } catch (Exception e) {
        e.printStackTrace();
    }
}
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       
    int selectedRow = tblGrades.getSelectedRow();
if (selectedRow != -1) {
    try {
        int id = Integer.parseInt(tblGrades.getValueAt(selectedRow, 0).toString());

        String selectedStudent = cmbStudent.getSelectedItem().toString();
        int studentId = Integer.parseInt(selectedStudent.split(" - ")[0]);

        String subject = txtSubject.getText().trim();
        String marksText = txtMarks.getText().trim();

        if (subject.isEmpty() || marksText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Subject and Marks fields cannot be empty.");
            return;
        }

        double marks = Double.parseDouble(marksText);

        Connection conn = DBConnection.getConnection();
        String query = "UPDATE grades SET student_id=?, subject=?, marks=? WHERE id=?";
        PreparedStatement pst = conn.prepareStatement(query);
        pst.setInt(1, studentId);
        pst.setString(2, subject);
        pst.setDouble(3, marks);
        pst.setInt(4, id);

        pst.executeUpdate();
        conn.close();

        JOptionPane.showMessageDialog(this, "Grade updated successfully!");
        loadGradesTable();
        clearForm();

    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Marks must be a valid number.");
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while updating: " + e.getMessage());
    }
} else {
    JOptionPane.showMessageDialog(this, "Please select a record to update.");
}


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

    try {
    String selectedStudent = cmbStudent.getSelectedItem().toString();
    int studentId = Integer.parseInt(selectedStudent.split(" - ")[0]);

    String subject = txtSubject.getText().trim();
    String marksText = txtMarks.getText().trim();

    if (subject.isEmpty() || marksText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Subject and Marks cannot be empty.");
        return;
    }

    double marks = Double.parseDouble(marksText);

    Connection conn = DBConnection.getConnection();
    String query = "INSERT INTO grades (student_id, subject, marks) VALUES (?, ?, ?)";
    PreparedStatement pst = conn.prepareStatement(query);
    pst.setInt(1, studentId);
    pst.setString(2, subject);
    pst.setDouble(3, marks);

    pst.executeUpdate();
    conn.close();

    JOptionPane.showMessageDialog(this, "Grade added successfully!");
    loadGradesTable();
    clearForm();

} catch (NumberFormatException ex) {
    JOptionPane.showMessageDialog(this, "Please enter valid numeric marks.");
} catch (Exception e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
}

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
    int selectedRow = tblGrades.getSelectedRow();
    if (selectedRow != -1) {
        int id = Integer.parseInt(tblGrades.getValueAt(selectedRow, 0).toString());

        try {
            Connection conn = DBConnection.getConnection();
            String query = "DELETE FROM grades WHERE id=?";
            PreparedStatement pst = conn.prepareStatement(query);
            pst.setInt(1, id);
            pst.executeUpdate();

            conn.close();

            JOptionPane.showMessageDialog(this, "Grade deleted successfully!");
            loadGradesTable();
            clearForm();

        } catch (Exception e) {
            e.printStackTrace();
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a record to delete.");
    }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       clearForm();                 
       tblGrades.clearSelection();
    }//GEN-LAST:event_btnClearActionPerformed

   
   private void tblGradesMouseClicked(java.awt.event.MouseEvent evt) {
    int row = tblGrades.getSelectedRow();
    if (row != -1) {
        String student = tblGrades.getValueAt(row, 1).toString();
        String subject = tblGrades.getValueAt(row, 2).toString();
        String marks = tblGrades.getValueAt(row, 3).toString();

        for (int i = 0; i < cmbStudent.getItemCount(); i++) {
            String comboItem = cmbStudent.getItemAt(i);
            if (comboItem.split(" - ")[1].trim().equalsIgnoreCase(student)) {
                cmbStudent.setSelectedIndex(i);
                break;
            }
        }

        txtSubject.setText(subject);
        txtMarks.setText(marks);
    }
}

    

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbStudent;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblGrades;
    private javax.swing.JTextField txtMarks;
    private javax.swing.JTextField txtSubject;
    // End of variables declaration//GEN-END:variables
}
